name: Publish `@crabnebula/updater`

env:
  DEBUG: napi:*
  APP_NAME: updater
  MACOSX_DEPLOYMENT_TARGET: "10.13"

permissions:
  contents: write
  id-token: write

on:
  workflow_dispatch:
    inputs:
      releaseId:
        description: "ID of the `@crabnebula/updater` release"
        required: true
  repository_dispatch:
    types: [publish-updater-nodejs]

defaults:
  run:
    working-directory: bindings/updater/nodejs

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              pnpm build
              strip -x *.node
          - host: windows-latest
            build: pnpm build
            target: x86_64-pc-windows-msvc
          - host: windows-latest
            build: pnpm build --target i686-pc-windows-msvc
            target: i686-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: |
              cd bindings/updater/nodejs
              set -e &&
              pnpm build --target x86_64-unknown-linux-gnu &&
              strip *.node
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: |
              cd bindings/updater/nodejs
              set -e
              pnpm build
              strip *.node
          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              pnpm build --target aarch64-apple-darwin --features native-tls-vendored --cargo-flags="--no-default-features"
              strip -x *.node
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: |
              cd bindings/updater/nodejs
              set -e &&
              pnpm build --target aarch64-unknown-linux-gnu &&
              aarch64-unknown-linux-gnu-strip *.node
          - host: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            setup: |
              sudo apt-get update
              sudo apt-get install gcc-arm-linux-gnueabihf -y
            build: |
              pnpm build --target armv7-unknown-linux-gnueabihf
              arm-linux-gnueabihf-strip *.node
          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: |
              cd bindings/updater/nodejs
              set -e &&
              rustup target add aarch64-unknown-linux-musl &&
              pnpm build --target aarch64-unknown-linux-musl &&
              /aarch64-linux-musl-cross/bin/aarch64-linux-musl-strip *.node
          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: pnpm build --target aarch64-pc-windows-msvc --features native-tls-vendored --cargo-flags="--no-default-features"
    name: stable - ${{ matrix.settings.target }} - node@18
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: latest
          package_json_file: bindings/updater/nodejs
      - uses: actions/setup-node@v4
        if: ${{ !matrix.settings.docker }}
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' }}
        with:
          version: 0.11.0
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Setup node x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: pnpm config set supportedArchitectures.cpu "ia32"
        shell: bash
      - run: pnpm install
      - name: Setup node x86
        uses: actions/setup-node@v4
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: 18
          architecture: x86
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: "--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build"
          run: ${{ matrix.settings.build }}
      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: bindings/updater/nodejs/${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  # FIXME: updater tests needs packager to be build first
  #        so we need to figure how to build the packager here as well without duplicating
  #        the publish-packager-nodejs workflow here
  # test-macOS-windows-binding:
  #   name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
  #   needs:
  #     - build
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       settings:
  #         - host: macos-latest
  #           target: x86_64-apple-darwin
  #         - host: windows-latest
  #           target: x86_64-pc-windows-msvc
  #       node:
  #         - "18"
  #         - "20"
  #   runs-on: ${{ matrix.settings.host }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: pnpm/action-setup@v2
  #       with:
  #         version: latest
  #         package_json_file: bindings/updater/nodejs
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ matrix.node }}
  #     - run: pnpm install
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: bindings-${{ matrix.settings.target }}
  #         path: bindings/updater/nodejs
  #     - name: List packages
  #       run: ls -R .
  #       shell: bash
  #     - name: Test bindings
  #       run: pnpm test
  # test-linux-x64-gnu-binding:
  #   name: Test bindings on Linux-x64-gnu - node@${{ matrix.node }}
  #   needs:
  #     - build
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       node:
  #         - "18"
  #         - "20"
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: pnpm/action-setup@v2
  #       with:
  #         version: latest
  #         package_json_file: bindings/updater/nodejs
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ matrix.node }}
  #     - run: pnpm install
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: bindings-x86_64-unknown-linux-gnu
  #         path: bindings/updater/nodejs
  #     - name: List packages
  #       run: ls -R .
  #       shell: bash
  #     - name: Test bindings
  #       working-directory: .
  #       run: docker run --rm -v $(pwd):/build -w /build node:${{ matrix.node }}-slim sh -c "cd bindings/updater/nodejs && yarn test"
  # test-linux-x64-musl-binding:
  #   name: Test bindings on x86_64-unknown-linux-musl - node@${{ matrix.node }}
  #   needs:
  #     - build
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       node:
  #         - "18"
  #         - "20"
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: pnpm/action-setup@v2
  #       with:
  #         version: latest
  #         package_json_file: bindings/updater/nodejs
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ matrix.node }}
  #     - name: Install dependencies
  #       run: |
  #         pnpm config set supportedArchitectures.libc "musl"
  #         pnpm install
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: bindings-x86_64-unknown-linux-musl
  #         path: bindings/updater/nodejs
  #     - name: List packages
  #       run: ls -R .
  #       shell: bash
  #     - name: Test bindings
  #       working-directory: .
  #       run: docker run --rm -v $(pwd):/build -w /build node:${{ matrix.node }}-alpine sh -c "cd bindings/updater/nodejs && yarn test"
  # test-linux-aarch64-gnu-binding:
  #   name: Test bindings on aarch64-unknown-linux-gnu - node@${{ matrix.node }}
  #   needs:
  #     - build
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       node:
  #         - "18"
  #         - "20"
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: bindings-aarch64-unknown-linux-gnu
  #         path: bindings/updater/nodejs
  #     - name: List packages
  #       run: ls -R .
  #       shell: bash
  #     - uses: pnpm/action-setup@v2
  #       with:
  #         version: latest
  #         package_json_file: bindings/updater/nodejs
  #     - name: Install dependencies
  #       run: |
  #         pnpm config set supportedArchitectures.cpu "arm64"
  #         pnpm config set supportedArchitectures.libc "glibc"
  #         pnpm install
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3
  #       with:
  #         platforms: arm64
  #     - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
  #     - name: Setup and run tests
  #       uses: addnab/docker-run-action@v3
  #       with:
  #         image: node:${{ matrix.node }}-slim
  #         options: "--platform linux/arm64 -v ${{ github.workspace }}:/build -w /build"
  #         run: |
  #           set -e
  #           cd bindings/updater/nodejs
  #           yarn test
  #           ls -la
  # test-linux-aarch64-musl-binding:
  #   name: Test bindings on aarch64-unknown-linux-musl - node@${{ matrix.node }}
  #   needs:
  #     - build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: bindings-aarch64-unknown-linux-musl
  #         path: bindings/updater/nodejs
  #     - name: List packages
  #       run: ls -R .
  #       shell: bash
  #     - uses: pnpm/action-setup@v2
  #       with:
  #         version: latest
  #         package_json_file: bindings/updater/nodejs
  #     - name: Install dependencies
  #       run: |
  #         pnpm config set supportedArchitectures.cpu "arm64"
  #         pnpm config set supportedArchitectures.libc "musl"
  #         pnpm install
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3
  #       with:
  #         platforms: arm64
  #     - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
  #     - name: Setup and run tests
  #       uses: addnab/docker-run-action@v3
  #       with:
  #         image: node:lts-alpine
  #         options: "--platform linux/arm64 -v ${{ github.workspace }}:/build -w /build"
  #         run: |
  #           set -e
  #           cd bindings/updater/nodejs
  #           yarn test
  # test-linux-arm-gnueabihf-binding:
  #   name: Test bindings on armv7-unknown-linux-gnueabihf - node@${{ matrix.node }}
  #   needs:
  #     - build
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       node:
  #         - "18"
  #         - "20"
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: bindings-armv7-unknown-linux-gnueabihf
  #         path: bindings/updater/nodejs
  #     - name: List packages
  #       run: ls -R .
  #       shell: bash
  #     - uses: pnpm/action-setup@v2
  #       with:
  #         version: latest
  #         package_json_file: bindings/updater/nodejs
  #     - name: Install dependencies
  #       run: |
  #         pnpm config set supportedArchitectures.cpu "arm"
  #         pnpm install
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3
  #       with:
  #         platforms: arm
  #     - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
  #     - name: Setup and run tests
  #       uses: addnab/docker-run-action@v3
  #       with:
  #         image: node:${{ matrix.node }}-bullseye-slim
  #         options: "--platform linux/arm/v7 -v ${{ github.workspace }}:/build -w /build"
  #         run: |
  #           set -e
  #           cd bindings/updater/nodejs
  #           yarn test
  #           ls -la
  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - build
      # - test-macOS-windows-binding
      # - test-linux-x64-gnu-binding
      # - test-linux-x64-musl-binding
      # - test-linux-aarch64-gnu-binding
      # - test-linux-aarch64-musl-binding
      # - test-linux-arm-gnueabihf-binding
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: latest
          package_json_file: bindings/updater/nodejs
      - uses: actions/setup-node@v4
      - run: pnpm install
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: bindings/updater/nodejs/artifacts
      - name: Move artifacts
        run: pnpm artifacts
      - name: List packages
        run: ls -R ./npm
        shell: bash
      - name: Publish
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          npm publish --access public
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          RELEASE_ID: ${{ github.event.client_payload.releaseId || inputs.releaseId }}
